AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)
AM_CXXFLAGS = $(HARDENED_CXXFLAGS)
AM_CPPFLAGS = $(HARDENED_CPPFLAGS)
EXTRA_LIBRARIES =
BUILDSYSDIR = ../buildsystem/

BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config
BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)

LIBBITCOIN_SERVER=libbitcoin_server.a
LIBBITCOIN_WALLET=libbitcoin_wallet.a
LIBBITCOIN_COMMON=libbitcoin_common.a
LIBBITCOIN_CLI=libbitcoin_cli.a
LIBBITCOIN_UTIL=libbitcoin_util.a
LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a
LIBBITCOINQT=qt/libbitcoinqt.a

# Make is not made aware of per-object dependencies to avoid limiting building parallelization
# But to build the less dependent modules first, we manually select their order here:
EXTRA_LIBRARIES += \
  crypto/libbitcoin_crypto.a \
  libbitcoin_util.a \
  libbitcoin_common.a \
  libbitcoin_server.a \
  libbitcoin_cli.a
if ENABLE_WALLET
BITCOIN_INCLUDES += $(BDB_CPPFLAGS)
EXTRA_LIBRARIES += libbitcoin_wallet.a
endif

LIBBITCOIN_CONSENSUS=

bin_PROGRAMS =
TESTS =
BENCHMARKS =

if BUILD_BITCOIND
  bin_PROGRAMS += scashd
endif

if BUILD_BITCOIN_UTILS
  bin_PROGRAMS += scash-cli scash-tx
endif

.PHONY: FORCE check-symbols check-security
# Scash #
BITCOIN_CORE_H = \
	src/net.h \
	src/mruset.h \
	src/netbase.h \
	src/serialize.h \
	src/allocators.h \
	src/version.h \
	src/clientversion.h \
	src/compat.h \
	src/protocol.h \
	src/uint256.h \
	src/addrman.h \
	src/util.h \
	src/sync.h \
	src/db.h \
	src/main.h \
	src/bignum.h \
	src/script.h \
	src/keystore.h \
	src/crypter.h \
	src/key.h \
	src/scrypt.h \
	src/hashblock.h \
	src/sph_blake.h \
	src/sph_types.h \
	src/sph_bmw.h \
	src/sph_groestl.h \
	src/sph_jh.h \
	src/sph_keccak.h \
	src/sph_skein.h \
	src/sph_luffa.h \
	src/sph_cubehash.h \
	src/sph_shavite.h \
	src/sph_simd.h \
	src/sph_echo.h \
	src/sph_hamsi.h \
	src/sph_fugue.h \
	src/chartdata.h


libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h

# server: shared between scashd and scash-qt
libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)
libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_server_a_SOURCES = \
	src/protocol.o \
	src/bitcoinrpc.o \
	src/rpcdump.o \
	src/rpcnet.o \
	src/rpcmining.o \
	src/rpcwallet.o \
	src/rpcblockchain.o \
	src/rpcrawtransaction.o
	src/netbase.o \
	$(BITCOIN_CORE_H)


# wallet: shared between scashd and scash-qt, but only linked
# when wallet enabled
libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_wallet_a_SOURCES = \
	src/alert.cpp \
	src/version.o \
	src/checkpoints.o \
	src/addrman.o \
	src/crypter.o \
	src/key.o \
	src/db.o \
	src/init.o \
	src/keystore.o \
	src/main.o \
	src/net.o \
	src/script.o \
	src/sync.o \
	src/random.o \
	src/wallet.o \
	src/walletdb.o \
	src/noui.o \
	src/kernel.o \
	src/pbkdf2.o \
	$(BITCOIN_CORE_H)

# crypto primitives library
crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES) $(PIC_FLAGS)
crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) $(PIC_FLAGS)
crypto_libbitcoin_crypto_a_SOURCES = \
	src/msha3.cpp \
	src/scrypt.o \
	src/scrypt_mine.o \
	src/scrypt-x86.o \
	src/scrypt-x86_64.o
        
# x13
crypto_libbitcoin_crypto_a_SOURCES += \
	src/fugue.c \
	src/hamsi.c \
	src/groestl.c \
	src/blake.c \
	src/bmw.c \
	src/skein.c \
	src/keccak.c \
	src/shavite.c \
	src/jh.c \
	src/luffa.c \
	src/cubehash.c \
	src/echo.c \
	src/simd.c

# common: shared between scashd, and scash-qt and non-server tools
libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_common_a_SOURCES = \
	src/blockexplorerstyle.o \
	src/blockexplorerserver.o \
	src/blockexplorer.o \
	src/chartdata.o \
	$(BITCOIN_CORE_H)

# util: shared between all executables.
# This library *must* be included to make sure that the glibc
# backward-compatibility objects and their sanity checks are linked.
libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_util_a_SOURCES = \
	src/util.o \
	$(BITCOIN_CORE_H)

if GLIBC_BACK_COMPAT
libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp
endif

# cli: shared between scash-cli and scash-qt
libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_cli_a_SOURCES = \
  rpc/client.cpp \
  $(BITCOIN_CORE_H)

nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h
#

# bitcoind binary #
scashd_SOURCES = main.cpp
scashd_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
scashd_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
scashd_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
scashd_SOURCES += scashd-res-windows.rc
endif

scashd_LDADD = \
  $(LIBBITCOIN_SERVER) \
  $(LIBBITCOIN_COMMON) \
  $(LIBBITCOIN_UTIL) \
  $(LIBBITCOIN_CRYPTO) \
  $(LIBMEMENV)

if ENABLE_WALLET
scashd_LDADD += libbitcoin_wallet.a
endif

scashd_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)

# scash-cli binary #
scash_cli_SOURCES = scash-cli.cpp
scash_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)
scash_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
scash_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
scash_cli_SOURCES += scash-cli-res.rc
endif

scash_cli_LDADD = \
  $(LIBBITCOIN_CLI) \
  $(LIBBITCOIN_UTIL)
scash_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)
#

CLEANFILES = *.gcda *.gcno

DISTCLEANFILES = obj/build.h

clean-local:
    -rm -f config-clean.h

.rc.o:
    @test -f $(WINDRES)
    $(AM_V_GEN) $(WINDRES) -DWINDRES_PREPROC -i $< -o $@

.mm.o:
    $(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
      $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) -c -o $@ $<

check-symbols: $(bin_PROGRAMS)
if GLIBC_BACK_COMPAT
    @echo "Checking glibc back compat..."
    $(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(BUILDSYSDIR)/contrib/devtools/symbol-check.py < $(bin_PROGRAMS)
endif

check-security: $(bin_PROGRAMS)
if HARDEN
    @echo "Checking binary security..."
    $(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(BUILDSYSDIR)/contrib/devtools/security-check.py < $(bin_PROGRAMS)
endif

%.pb.cc %.pb.h: %.proto
    @test -f $(PROTOC)
    $(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)

if ENABLE_QT
include MakeNew.qt.include
endif
